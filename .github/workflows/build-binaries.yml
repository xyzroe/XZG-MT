name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run build:pkg:mac

      - name: Rename artifacts (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          # Try common base names and then fall back to suffix detection
          for name in ws-tcp-bridge xzg-ws-tcp-bridge; do
            if [ -f "dist/mac/${name}-arm64" ]; then mv "dist/mac/${name}-arm64" "dist/mac/ws-tcp-bridge-macos-arm64"; fi
            if [ -f "dist/mac/${name}-x64" ]; then mv "dist/mac/${name}-x64" "dist/mac/ws-tcp-bridge-macos-x64"; fi
          done
          for f in dist/mac/*; do
            b="$(basename "$f")"
            if [[ "$b" == *arm64 && ! "$b" == *macos* ]]; then mv "$f" "dist/mac/ws-tcp-bridge-macos-arm64"; fi
            if [[ "$b" == *x64 && ! "$b" == *macos* ]]; then mv "$f" "dist/mac/ws-tcp-bridge-macos-x64"; fi
          done
          ls -l dist/mac || true

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:pkg:linux

      - name: Rename artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -e
          for name in ws-tcp-bridge xzg-ws-tcp-bridge; do
            if [ -f "dist/linux/${name}-arm64" ]; then mv "dist/linux/${name}-arm64" "dist/linux/ws-tcp-bridge-linux-arm64"; fi
            if [ -f "dist/linux/${name}-x64" ]; then mv "dist/linux/${name}-x64" "dist/linux/ws-tcp-bridge-linux-x64"; fi
          done
          for f in dist/linux/*; do
            b="$(basename "$f")"
            if [[ "$b" == *arm64 && ! "$b" == *linux* ]]; then mv "$f" "dist/linux/ws-tcp-bridge-linux-arm64"; fi
            if [[ "$b" == *x64 && ! "$b" == *linux* ]]; then mv "$f" "dist/linux/ws-tcp-bridge-linux-x64"; fi
          done
          ls -l dist/linux || true

      - name: Build (Windows + Legacy Win7)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          npm run build:pkg:win
          npm run build:legacy:win7

      - name: Rename artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          set -e
          if [ -f "dist/win/ws-tcp-bridge.exe" ]; then mv "dist/win/ws-tcp-bridge.exe" "dist/win/ws-tcp-bridge-windows-x64.exe"; fi
          if [ -f "dist/win-legacy/ws-tcp-bridge-legacy.exe" ]; then mv "dist/win-legacy/ws-tcp-bridge-legacy.exe" "dist/win-legacy/ws-tcp-bridge-windows-legacy.exe"; fi
          ls -l dist/win || true
          ls -l dist/win-legacy || true

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: dist/mac/*
          if-no-files-found: error

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/linux/*
          if-no-files-found: error

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            dist/win/*.exe
            dist/win-legacy/*.exe
          if-no-files-found: error

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-release
          merge-multiple: true

      - name: Show downloaded files
        run: ls -Rla dist-release || true

      - name: Create GitHub Release and upload assets files
        uses: softprops/action-gh-release@v2
        with:
          files: dist-release/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build & Push Docker images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main Docker image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare Home Assistant add-on artifact
        run: |
          set -e
          mkdir -p dist-addon
          cp -R ws_tcp_bridge dist-addon/
          cp repository.json dist-addon/

      - name: Upload add-on artifact
        uses: actions/upload-artifact@v4
        with:
          name: home-assistant-addon
          path: dist-addon/**

